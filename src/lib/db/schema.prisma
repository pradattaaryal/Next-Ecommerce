generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  accounts        Account[]
  authenticators  Authenticator[]
  orders          Order[]
  reviews         Review[]
  sessions        Session[]
  stripeId        String?
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Product {
  id                 String      @id @default(cuid())
  name               String
  category           String
  images             String
  description        String?
  price              Float
  listPrice          Float
  countInStock       Int
  colors             String[]    @default(["White", "Red", "Black"])
  avgRating          Float       @default(0)
  numReviews         Int         @default(0)
  numSales           Int         @default(0)
  isPublished        Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  reviews            Review[]
  orderItems         OrderItem[] // Add this field
}

model Review {
  id                 String  @id @default(cuid())
  userId             String
  isVerifiedPurchase Boolean  @default(false)
  productId          String
  rating             Int
  title              String
  comment            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id])
  user               User     @relation(fields: [userId], references: [id])
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  amount          Float
  status          String
  createdAt       DateTime  @default(now())
  paymentIntentId String    @unique
  user            User      @relation(fields: [userId], references: [id])
  orderItems      OrderItem[] 
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}